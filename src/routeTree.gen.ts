/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as R3Import } from './routes/3'
import { Route as R2Import } from './routes/2'
import { Route as R1Import } from './routes/1'
import { Route as NumberImport } from './routes/$number'

// Create/Update Routes

const R3Route = R3Import.update({
  id: '/3',
  path: '/3',
  getParentRoute: () => rootRoute,
} as any)

const R2Route = R2Import.update({
  id: '/2',
  path: '/2',
  getParentRoute: () => rootRoute,
} as any)

const R1Route = R1Import.update({
  id: '/1',
  path: '/1',
  getParentRoute: () => rootRoute,
} as any)

const NumberRoute = NumberImport.update({
  id: '/$number',
  path: '/$number',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$number': {
      id: '/$number'
      path: '/$number'
      fullPath: '/$number'
      preLoaderRoute: typeof NumberImport
      parentRoute: typeof rootRoute
    }
    '/1': {
      id: '/1'
      path: '/1'
      fullPath: '/1'
      preLoaderRoute: typeof R1Import
      parentRoute: typeof rootRoute
    }
    '/2': {
      id: '/2'
      path: '/2'
      fullPath: '/2'
      preLoaderRoute: typeof R2Import
      parentRoute: typeof rootRoute
    }
    '/3': {
      id: '/3'
      path: '/3'
      fullPath: '/3'
      preLoaderRoute: typeof R3Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/$number': typeof NumberRoute
  '/1': typeof R1Route
  '/2': typeof R2Route
  '/3': typeof R3Route
}

export interface FileRoutesByTo {
  '/$number': typeof NumberRoute
  '/1': typeof R1Route
  '/2': typeof R2Route
  '/3': typeof R3Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$number': typeof NumberRoute
  '/1': typeof R1Route
  '/2': typeof R2Route
  '/3': typeof R3Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$number' | '/1' | '/2' | '/3'
  fileRoutesByTo: FileRoutesByTo
  to: '/$number' | '/1' | '/2' | '/3'
  id: '__root__' | '/$number' | '/1' | '/2' | '/3'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  NumberRoute: typeof NumberRoute
  R1Route: typeof R1Route
  R2Route: typeof R2Route
  R3Route: typeof R3Route
}

const rootRouteChildren: RootRouteChildren = {
  NumberRoute: NumberRoute,
  R1Route: R1Route,
  R2Route: R2Route,
  R3Route: R3Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/$number",
        "/1",
        "/2",
        "/3"
      ]
    },
    "/$number": {
      "filePath": "$number.jsx"
    },
    "/1": {
      "filePath": "1.jsx"
    },
    "/2": {
      "filePath": "2.jsx"
    },
    "/3": {
      "filePath": "3.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
